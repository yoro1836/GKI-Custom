name: Android12-5.10-Custom

on: 
  workflow_dispatch:
    inputs:
      kernel_repo:
        required: true
        type: string
        description: >
          Kernel Repo
      susfs:
        required: true
        type: boolean
        description: >
          Add susfs support
      kernelsu:
        required: true
        type: boolean
        description: >
          Enable KernelSU

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt install repo wget -y

    - name: Clone the kernel source code
      run: |
        cd $GITHUB_WORKSPACE
        mkdir android-kernel
        cd android-kernel
        git clone --depth=1 ${{ inputs.kernel_repo }} common
        
    - name: KernelSU
      if: ${{ inputs.kernelsu == true }}
      run: |
          cd $GITHUB_WORKSPACE/android-kernel/common
          curl -LSs "https://raw.githubusercontent.com/rsuntk/KernelSU/main/kernel/setup.sh" | bash -s susfs-v1.5.5
          
    - name: Setup SUSFS
      if: ${{ inputs.susfs == true }}
      run: |
          cd $GITHUB_WORKSPACE/android-kernel
          git clone -q --depth=1 https://gitlab.com/simonpunk/susfs4ksu -b gki-android12-5.10 $GITHUB_WORKSPACE/android-kernel/susfs4ksu
          SUSFS_PATCHES="$GITHUB_WORKSPACE/android-kernel/susfs4ksu/kernel_patches"
          cd $GITHUB_WORKSPACE/android-kernel/common
          cp $SUSFS_PATCHES/include/linux/* ./include/linux/
          cp $SUSFS_PATCHES/fs/* ./fs/
          SUSFS_VERSION=$(grep -E '^#define SUSFS_VERSION' ./include/linux/susfs.h | cut -d' ' -f3 | sed 's/"//g')
          patch -p1 <"$SUSFS_PATCHES/50_add_susfs_in_gki-5.10.patch"
          
    - name: Bomb setlocalversion
      run: |
          if grep -q '[-]dirty' scripts/setlocalversion; then
          sed -i 's/-dirty//' scripts/setlocalversion
          fi
          if grep -q 'echo "+"' scripts/setlocalversion; then
          sed -i 's/echo "+"/# echo "+"/g' scripts/setlocalversion
          fi
          
    - name: Build Kernel
      run: |
          MAKE_ARGS="
          -j$(nproc --all)
          ARCH=arm64 
          LLVM=1
          LLVM_IAS=1
          O=$GITHUB_WORKSPACE/out
          CROSS_COMPILE=aarch64-linux-gnu-
          CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
          "
          KERNEL_IMAGE=$GITHUB_WORKSPACE/out/arch/arm64/boot/Image
          make $MAKE_ARGS gki_defconfig
          make $MAKE_ARGS Image
          
    - name: Prepare artifacts
      id: prepareArtifacts
      run: |
          cd $GITHUB_WORKSPACE
          OUTDIR=$GITHUB_WORKSPACE/out
          mkdir output
          cp $OUTDIR/Image ./output/
          git clone https://github.com/Kernel-SU/AnyKernel3
          rm -rf ./AnyKernel3/.git
          cp $OUTDIR/Image ./AnyKernel3/
        
    - name: Upload Image and Image.gz and boot.img
      uses: actions/upload-artifact@v4
      with:
        name: Image-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
        path: ./output/*

    - name: Upload AnyKernel3
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
        path: ./AnyKernel3/*
